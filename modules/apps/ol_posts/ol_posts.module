<?php

/**
 * @file
 * Contains lus_post.module.
 */

use Drupal\Core\Url;
use Drupal\user\Entity\User;

/**
 * Implements hook_theme().
 */
function ol_posts_theme() {
  return [
    'posts_list' => [
      'variables' => [
        'vars' => NULL,
      ],
      'template' => 'posts-list',
    ],
    'posts_block' => [
      'variables' => [
        'vars' => NULL,
      ],
      'template' => 'posts-block',
    ],
    'post_card_list' => [
      'variables' => [
        'vars' => NULL,
      ],
      'template' => 'post-card-list',
    ],
  ];
}

/**
 * Implements hook_add_ol_section()
 * @param $sections
 */
function ol_posts_add_ol_section(&$sections){
  $sections['posts'] = array(
    'label' => t('Posts'),
    'path' => 'posts',
    'weight' => 65,
    'icon_class' => 'lni lni-pencil-alt',
  );
}

/**
 * Implements hook_add_home_tab()
 * Provide content for home tab.
 *
 * @param &$tabs
 *
 */
function ol_posts_add_home_tab(&$tabs) {
  $tabs['posts'] = [
    'label' => 'Posts',
    'weight' => 10,
    'query_link' => 'posts',
    'new_badge' => null,
    'icon' => 'lni lni-comments-alt',
  ];
}

/**
 * Implements hook_provide_home_tab_content()
 * Add links at comments to use in activity stream.
 *
 * @param $active_tab
 *
 * @return mixed
 */
function ol_posts_provide_home_tab_content($active_tab) {
  // Check if current item concerns this module.
  if ($active_tab == 'posts') {
    return getTabContentPosts();
  }
}

/**
 * Returns html for posts in home tab.
 *
 */
 function getTabContentPosts(){

  // Provide static services, because .module file can't inject dependencies.
  $pager_service = \Drupal::service('pager.manager');
  $pager_params = \Drupal::service('pager.parameters');
  $posts_service = \Drupal::service('olposts.posts');
  $groups = \Drupal::service('olmain.groups');

   // Handle settings.
   $global_group_id = $groups->getGlobalGroupId();

  // TEMP solution for older accounts.
  $global_group_id_new = handle_global_group_for_legacy_users($global_group_id, $groups);
  $global_group_id = (is_numeric($global_group_id_new)) ? $global_group_id_new : $global_group_id;

  // Pager init.
  $page = $pager_params->findPage();
  $num_per_page = 20;
  $offset = $num_per_page * $page;

  // Get group_id where home posts live.
  $post_group_id = $groups->getGlobalGroupId();

  // Get posts data.
  $post_list_data = $posts_service->getPostsList(null, $num_per_page, $offset, null, $post_group_id);
  $posts = $posts_service->renderPostsList($post_list_data);
  $post_form = \Drupal::formBuilder()->getForm(\Drupal\ol_posts\Form\PostForm::class, null, null, null, $global_group_id);

  // Pager, now that we have the total number of results.
  $total_result = $posts_service->getPostsList(null, null, null, true, $global_group_id);
  $pager = $pager_service->createPager($total_result, $num_per_page);
  $pager->getCurrentPage();

  // Build theme vars.
  $theme_vars = [
    'posts' => $posts,
    'post_form' => $post_form,
  ];
  // Build render array.
  $render = [];
  $render[] = [
    '#theme' => 'posts_block',
    '#vars' => $theme_vars,
    '#type' => 'remote',
    '#attached' => [
      'library' => [
        'ol_posts/ol_posts'
      ],
    ],
  ];
  // Add pager and return.
  $render[] = ['#type' => 'pager'];
  return \Drupal::service('renderer')->render($render);
}

/**
 * @param $gid
 *
 * @param $current_uid
 *
 * @return mixed
 */
function checkUserInGroup($gid, $current_uid){
  $query = \Drupal::database()->select('ol_group_user', 'gu');
  $query->addField('gu', 'id');
  $query->condition('gu.member_uid', $current_uid);
  $query->condition('gu.group_id', $gid);
  return $query->execute()->fetchField();

}

/**
 * Implements hook_cron().
 *
 */
function ol_posts_cron() {

  // Only run after 9am
  if(date('H') > 9) {
    // Query questions that needs publishing.
    $post_settings = getAllPostSettings();
    // Loop through results.
    foreach ($post_settings as $post_setting) {
      // Get data.
      $send_days = json_decode($post_setting->send_days, TRUE);
      $send_days_values = array_values($send_days);
      // Get current day.
      $current_day = date('D');
      // Check if current day is in data, if so: send question.
      if (in_array($current_day, $send_days_values, TRUE)) {
        send_question($post_setting);
      }
    }
  }
}

/**
 * Custom procedural function for publishing and mailing culture questions.
 *
 * @param $culture_question
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function send_question($post_setting) {

  // Handle data.
  $gid = $post_setting->group_id;
  $user_id = $post_setting->user_id;
  $question = $post_setting->question;
  $id = $post_setting->id;

  // Mail, if enabled.
  $mail = \Drupal::service('olmain.mail');
  $subject = $question;
  $sender = $account = User::load($user_id)->getAccountName();
  $url = Url::fromRoute('lus_post.posts', ['gid' => $gid,])->toString();
  $mail_body = t('Please let your team know: ');
  $cta_text = t('Post Your Answer');
  $bold_text = $question;
  $base_url = 'https://app.culturegrower.nl';
  $lower_body = t('This will help our team to stay connected and up-to-date, without unnecessary meetings.');
  $sender_mail = 'notifications@culturegrower.nl';
  $mail_result = $mail->sendMail($subject, $url, $mail_body, NULL, $sender, $gid, $cta_text, $lower_body, $bold_text, $sender_mail, $base_url);

  // Update settings with new execution time.
  if ($mail_result == true) {
    updatePostSettings($id, $gid, $user_id);
  }

}

/**
 * @param $id
 * @param $gid
 * @param $user_id
 */
function updatePostSettings($id, $gid, $user_id) {
  // Update next execution, so it can't be sent anymore today.
  $next_execution = strtotime('today midnight') + 86400;
  // Query update.
  \Drupal::database()->update('ol_post_settings')
    ->fields([
      'next_execution' => $next_execution,
    ])
    ->condition('id', $id)
    ->condition('user_id', $user_id)
    ->condition('group_id', $gid)
    ->execute();
}

/**
 * @return mixed
 */
function getAllPostSettings() {
  $query = \Drupal::database()->select('ol_post_settings', 'ops');
  $query->addField('ops', 'id');
  $query->addField('ops', 'user_id');
  $query->addField('ops', 'group_id');
  $query->addField('ops', 'question');
  $query->addField('ops', 'send_days');
  $query->condition('ops.next_execution', \Drupal::time()->getRequestTime(), '<');
  $query->condition('ops.status', 1);
  return $query->execute()->fetchAll();
}


/**
 * Temp function for legacy users.
 *
 * @param $global_group_id
 * @param $groups
 *
 * @return mixed
 */
function handle_global_group_for_legacy_users($global_group_id, $groups){
  // If there is a $global_group_id, current (older) user maybe is not in ol_group_user yet.
  if(is_numeric($global_group_id)){
    // Check if user already added to global_group.
    $current_uid = \Drupal::currentUser()->id();
    $user_in_group = checkUserInGroup($global_group_id, $current_uid);
    // Add to global group, if not there yet.
    if(!is_numeric($user_in_group)){
      $groups->addUserToGlobalGroup($current_uid);
    }
  }

  // Initiate global group and add user.
  elseif(empty($global_group_id)) {
    $has_full_access = \Drupal::currentUser()->hasPermission('access all ol content');
    if ($has_full_access) {
      // Initiate global_group.
      $current_uid = \Drupal::currentUser()->id();
      $groups->initiateGlobalGroup($current_uid);
      // Add current user to global_group.
      $groups->addUserToGlobalGroup($current_uid);
      return $groups->getGlobalGroupId();
    }
  }
}

