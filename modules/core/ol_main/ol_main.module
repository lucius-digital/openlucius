<?php

/**
 * @file
 * Contains main.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;

/**
 * Implements hook_theme().
 */
function ol_main_theme() {
  return [
    'main_nav_block' => [
      'variables' => [
        'vars' => NULL,
      ],
      'template' => 'main-nav-block',
    ],
    'main_title_block' => [
      'variables' => [
        'vars' => NULL,
      ],
      'template' => 'main-title-block',
    ],
    'main_sections_block' => [
      'variables' => [
        'vars' => NULL,
      ],
      'template' => 'main-sections-block',
    ],
    'sidebar_header_block' => [
      'variables' => [
        'vars' => NULL,
      ],
      'template' => 'sidebar-header-block',
    ],
    'group_config_page' => [
      'variables' => [
        'vars' => NULL,
      ],
      'template' => 'group-config-page',
    ],
    'comment_item' => [
      'variables' => [
        'vars' => NULL,
      ],
      'template' => 'comment-item',
    ],
    'comment_item_small' => [
      'variables' => [
        'vars' => NULL,
      ],
      'template' => 'comment-item-small',
    ],
    'file_item' => [
      'variables' => [
        'vars' => NULL,
      ],
      'template' => 'file-item',
    ],
    'file_modal_remove' => [
      'variables' => [
        'vars' => NULL,
      ],
      'template' => 'file-modal-remove',
    ],
    'groups_archived_page' => [
      'variables' => [
        'vars' => NULL,
      ],
      'template' => 'groups-archived-page',
    ],
    'groups_card' => [
      'variables' => [
        'vars' => NULL,
      ],
      'template' => 'groups-card',
    ],
    'home_wrapper' => [
      'variables' => [
        'vars' => NULL,
      ],
      'template' => 'home-wrapper',
    ],
    'general_settings_page' => [
      'variables' => [
        'vars' => NULL,
      ],
      'template' => 'general-settings-page',
    ],
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Redirect to home after saving form.
 */
function ol_main_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
  foreach (array_keys($form['actions']) as $action) {
    if (isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
      $form['actions'][$action]['#submit'][] = '_ol_main_form_submit';
    }
  }
}

function _ol_main_form_submit(array $form, FormStateInterface $form_state){
  //Add logic for checking is this is first time logged in User
  $form_state->setRedirect('ol_main.home');
}

/**
 * Implements hook_add_user_menu_links()
 * Adds menu item to user menu.
 *
 * @param &$items
 *
 * @return void
 */
function ol_main_add_user_menu_links_bottom(&$items) {
  // Return org settings link, if user has org admin permisssions.
  $user = \Drupal::currentUser();
  if($user->hasPermission('administer organisation settings')) {
    $items['general_settings'] = [
      'label' => t('General Settings'),
      'path' => $url = Url::fromRoute('ol_main.general_settings_colors')->toString(),
      'weight' => 0,
      'icon_class' => 'lni lni-cog',
    ];
  }
}

/**
 * Implements hook_mail().
 *
 */
function ol_main_mail($key, &$message, $params) {

  $site_name = \Drupal::config('system.site')->get('name');
  // Options, needed for mulitlangual mails.
  /*  $options = array(
      'langcode' => $message['langcode'],
    ); */
  // If sender_email not provided, get default.


  switch ($key) {
    case 'ol_main_mail':
      $message['headers']['Reply-To'] = \Drupal::config('system.site')->get('mail');
      $message['headers']['Content-Type'] = 'text/html';
      $message['headers']['From'] = $params['sender_name'] .' ' .t('(via @sitename)', ['@sitename' => $site_name]) .'<' . $params['sender_mail'] . '>';
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      $message['cta_url'] = $params['cta_url'];
      $message['cta_text'] = $params['cta_text'];
      $message['lower_body'] = $params['lower_body'];
      $message['bold_text'] = $params['bold_text'];
      $message['sender_name'] = $params['sender_name'];
      $message['name_recipient'] = $params['name_recipient'];
      $message['base_url'] = $params['base_url'];
      break;
  }
}

/**
 * Implements hook_file_download
 * @param $uri
 *
 * @return array
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function ol_main_file_download($uri) {

  // Get vars.
  $user_id = \Drupal::currentUser()->id();
  // Security hardening for anonymous users.
  if ($user_id == 0 || empty($user_id)) {
    throw new AccessDeniedHttpException();
  }

  // Check if this is a FILE SOMEWHERE IN A GROUP.
  // Check for result: belongs current user to organization and group of uploaded file?
  $query = \Drupal::database()->select('ol_file', 'file');
  $query->addField('file', 'file_id');
  $query->join('ol_group_user', 'group_user', 'group_user.group_id = file.group_id');
  $query->join('file_managed', 'file_man', 'file_man.fid = file.file_id');
  $query->condition('group_user.member_uid', $user_id);
  $query->condition('file_man.uri', $uri);
  $access = $query->execute()->fetchField();


  // Check if this maybe is a USER PICTURE.
  // Provide access to user picture if current user is somewhere in a group with requested user picture.
  // This way we are also prepared for 'external' role.
  if(empty($access)){
    // Get all groups user picture owner is in.
    $query = \Drupal::database()->select('file_managed', 'file');
    $query->addField('ogu', 'group_id');
    $query->join('ol_group_user', 'ogu', 'ogu.member_uid = file.uid');
    // This join is needed, so we only query user pictures.
    $query->join('user__field_user_picture', 'fup', 'fup.field_user_picture_target_id = file.fid');
    $query->condition('file.uri', $uri);
    $group_ids = $query->execute()->fetchCol();

    // Get all groups current user is in.
    $group_ids_current_user = getUserGroups($user_id);
    // Grant access if they have a common group.
    $access = !empty(array_intersect($group_ids, $group_ids_current_user));
  }

  // OWN USER PICTURE during upload?
  if(empty($access)){
    // Get all groups user picture owner is in.
    $query = \Drupal::database()->select('file_managed', 'file');
    $query->addField('file', 'fid');
    $query->condition('file.uri', $uri);
    $query->condition('file.uid', $user_id);
    $fid = $query->execute()->fetchField();
    // Grant access if this is a picture user owns, even status 0.
    $access = !empty($fid);
  }

  // Check if this maybe is a STORY IMAGE.
  // Provide access to story image if current user is somewhere in a group with requested image.
  // This way we are also prepared for 'external' role.
  if(empty($access)) {
    // Get all groups user of story image is in.
    $query = \Drupal::database()->select('file_managed', 'file');
    $query->addField('ogu', 'group_id');
    $query->join('ol_group_user', 'ogu', 'ogu.member_uid = file.uid');
    // This join is needed, so we only query story images.
    $query->join('ol_file', 'ol_file', 'ol_file.file_id = file.fid');
    $query->condition('file.uri', $uri);
    $query->condition('ol_file.entity_type', 'story');
    $group_ids = $query->execute()->fetchCol();

    // Get all groups current user is in.
    $group_ids_current_user = getUserGroups($user_id);
    // Grant access if they have a common group.
    $access = !empty(array_intersect($group_ids, $group_ids_current_user));
  }

  // Results, grant access to file.
  if (!empty($access)) {
    $files = \Drupal::entityTypeManager()
      ->getStorage('file')
      ->loadByProperties(['uri' => $uri]);
    $file = reset($files);

    return file_get_content_headers($file);
  }
  // No results, deny access to file.
  else {
    throw new AccessDeniedHttpException();
  }
}

/**
 * Todo: find out where file_usage is for.
 *
 * Somehow the records Drupal inserts in the file_usage table blocks private image fields
 *  downloads from controlling it with hook_file_download.
 * We need this for control over user images downloads.
 *
 * So we delete these records for now :s
 *
 * implements hook_ENTITY_update()
 *
 */
function ol_main_user_update($account){
  // Get current user id.
  $user_id = \Drupal::currentUser()->id();
  // Delete the records, again :s
  \Drupal::database()->delete('file_usage')
    ->condition('id', $account->id())
    ->condition('type', 'user')
    ->execute();
  // Log it.
  \Drupal::logger('ol_main_user_update')->info(
    'Deleted from file_usage. $uid:'.$user_id .' | $account->id(): '.$account->id());
}

/**
 * @return mixed
 */
function getUserGroups($user_id){
  // Get user data.
  $query = \Drupal::database()->select('ol_group_user', 'gr');
  $query->addField('gr', 'group_id');
  $query->condition('gr.status', 1);
  $query->condition('gr.member_uid', $user_id);
  return $query->execute()->fetchCol();
}

/**
 * Allowed HTML tags, via Summer editor
 */
function getAllowedHTMLTags(){
  return [
    'a',
    'b',
    'u',
    'p',
    'i',
    's',
    'strike',
    'h3',
    'h4',
    'h5',
    'pre',
    'em',
    'strong',
    'cite',
    'blockquote',
    'code',
    'ul',
    'ol',
    'li',
    'dl',
    'dt',
    'dd',
    'br',
    'div',
    'table',
    'thead',
    'tbody',
    'th',
    'tr',
    'td',
    'img',
    'style',
    'data',
  ];
}

/**
 * @param $string
 *
 * @return string|string[]|null
 */
function sanatizeSummernoteInput($string){
  // Remove all attributes from elements except in a, for links.
//  $string = preg_replace("<(\w+)\s*(?:(?:(?:(?!href=|src=)[^>]))*((?:href=|src=)=['\"][^'\"]*['\"]\s*)?)+>",'<$1$2>', $string);
  $string = preg_replace("~<(?!a|img\s)([a-z][a-z0-9]*)[^>]*?(/?)>~i",'<$1$2>', $string);
  // Replace space entities.
  $string = str_replace('&nbsp;', ' ', $string);
  // Replace div with text to p with text as much as possible,
  //  because divs get pasted and are essential for paragraphing for example in Gmail,
  //  we allow them at paste in Summernote.
  // Replace divs without attr.
  $string = preg_replace('/<div>([^<]+)<\/div>/i', '<p>\\1</p>', $string);
  // Replace divs with attr.
  return preg_replace('/<div(?:\s[^>]*)?>([^<]+)<\/div>/i', '<p>\\1</p>', $string);
}

/**
 * @param $string
 *
 * @return string|string[]
 */
/*function base64imgFilter($string){
  // This is needed because xss:filter strips 'data', re-add this here.
  // Todo: this should be one reg ex.
  $string = str_replace('src="/image/', 'class="img-fluid" src="data:/image/', $string);
  return str_replace('src="image/', 'class="img-fluid" src="data:/image/', $string);
}*/

/**
 * @param $x
 * @param $y
 * @return mixed
 */
function sortByWeight($x, $y) {
  return $x['weight'] - $y['weight'];
}
/**
 * @param $string
 * @param $max_characters
 * @param int $start
 * @return string
 */
function shortenString($string, $max_characters = 40, $start = 0){
  return strlen($string) > $max_characters ? substr($string, $start, $max_characters).'...' : $string;
}
/**
 * @param $datetime
 * @param bool $full
 * @return string
 * @throws Exception
 *
 * From: https://stackoverflow.com/questions/1416697/converting-timestamp-to-time-ago-in-php-e-g-1-day-ago-2-days-ago
 */
function time_elapsed_string($datetime, $full = false) {
  $now = new DateTime;
  $ago = new DateTime($datetime);
  $diff = $now->diff($ago);

  $diff->w = floor($diff->d / 7);
  $diff->d -= $diff->w * 7;

  $string = array(
    'y' => t('year'),
    'm' => t('month'),
    'w' => t('week'),
    'd' => t('day'),
    'h' => t('hour'),
    'i' => t('minute'),
    's' => t('second'),
  );
  foreach ($string as $k => &$v) {
    if ($diff->$k) {
      $v = $diff->$k . ' ' . t($v . ($diff->$k > 1 ? 's' : ''));
    } else {
      unset($string[$k]);
    }
  }
  if (!$full) $string = array_slice($string, 0, 1);
  return $string ? implode(', ', $string) . t(' ago') : t('just now');
}

/**
 * Helper function to detect and create links in plain texts,
 *   like posts, inline comments and chat-items.
 *
 * @param $body
 * @return string|string[]|null
 */
function detectAndCreateLink($body){
  $url = '~(?:(https?)://([^\s<]+)|(www\.[^\s<]+?\.[^\s<]+))(?<![\.,:])~i';
  return preg_replace($url, '<a href="$0" title="$0" class="inline-link">$0</a>', $body);
}
